---
title: "{{< meta params.title >}}"
author: "UMCCR - Genomics Platform Group"
date: now
date-format: "YYYY-MM-DD HH:mm Z"
execute:
  echo: false
  eval: true
format:
  html:
    toc: false
    toc-expand: 1
    toc-title: Contents
    toc-location: body
    highlight-style: github
    number-sections: false
    link-external-icon: true
    link-external-newwindow: true
    embed-resources: true
    code-copy: true
    code-link: true
    code-fold: true
    code-block-border-left: true
    smooth-scroll: true
    grid:
      body-width: 1300px
params:
  title: "UMCCR bcl_convert Workflow QC Report"
  indir_tidy: "X"
---

```{r load_pkgs}
{
  library(dplyr)
  library(dracarys)
  library(DT, include.only = "datatable")
  library(ggplot2, include.only = c("ggplot", "aes"))
  library(glue, include.only = "glue")
  library(here, include.only = "here")
  library(knitr, include.only = "kable")
  library(plotly, include.only = "ggplotly")
  library(purrr, include.only = "map")
  library(scales, include.only = "pretty_breaks")
  library(tidyr, include.only = "unnest")
  library(tibble, include.only = "tibble")
}
```

```{r data_parse}
token <- dracarys::ica_token_validate()
# gds_outdir <- params$gds_outdir
gds_outdir <- "gds://production/primary_data/230714_A01052_0158_AH7WGHDSX7/202307151453444c/230714_A01052_0158_AH7WGHDSX7_bclconvert_multiqc"

j <- dracarys::gds_files_list_filter_relevant(gds_outdir, token = token, include = "PresignedUrl") |>
  dplyr::pull(.data$presigned_url)
stopifnot(length(j) == 1)
d_stats <- dracarys::MultiqcFile$new(j)$read()
d_plots <- dracarys::multiqc_parse_plots(j, plot_names = "everything")
```

## Statistics

### Sample

```{r}
x <- d_stats |>
  dplyr::filter(multiqc_tool == "multiqc_bclconvert_bysample") |>
  dplyr::select(-"multiqc_tool", "Sample Name" = "multiqc_sample") |>
  tidyr::unnest("data")
num_cols <- purrr::map_lgl(x, is.numeric)
num_cols <- names(num_cols[num_cols])
# round num cols
x <- x |>
  dplyr::mutate(dplyr::across(dplyr::all_of(num_cols), \(x) round(x, 1)))

dt <- DT::datatable(
  x,
  extensions = c("Scroller", "Buttons", "KeyTable"),
  options = list(
    scroller = TRUE, scrollY = 600, scrollX = TRUE, autoWidth = FALSE, keys = TRUE,
    buttons = c("csv", "excel"), dom = "Blfrtip"
  )
)
for (col in num_cols) {
  dt <- dt |>
    DT::formatStyle(
      col,
      background = DT::styleColorBar(x[[col]], color = "lightgreen"),
      backgroundSize = "90% 90%",
      backgroundRepeat = "no-repeat",
      backgroundPosition = "center"
    )
}
dt |>
  DT::formatCurrency(num_cols, currency = "", interval = 3, mark = ",", digits = 0)
```

### Lane

```{r}
x <- d_stats |>
  dplyr::filter(multiqc_tool == "multiqc_bclconvert_bylane") |>
  dplyr::select(-"multiqc_tool", "RunID - Lane" = "multiqc_sample") |>
  tidyr::unnest("data")
num_cols <- purrr::map_lgl(x, is.numeric)
num_cols <- names(num_cols[num_cols])
x <- x |>
  dplyr::mutate(dplyr::across(dplyr::all_of(num_cols), \(x) round(x, 1)))

dt <- DT::datatable(
  x,
  extensions = c("Scroller", "Buttons", "KeyTable"),
  options = list(
    scroller = TRUE, scrollY = 200, scrollX = TRUE, autoWidth = FALSE, keys = TRUE,
    buttons = c("csv", "excel"), dom = "Blfrtip"
  )
)
for (col in num_cols) {
  dt <- dt |>
    DT::formatStyle(
      col,
      background = DT::styleColorBar(x[[col]], color = "lightgreen"),
      backgroundSize = "90% 90%",
      backgroundRepeat = "no-repeat",
      backgroundPosition = "center"
    )
}
dt |>
  DT::formatCurrency(num_cols, currency = "", interval = 3, mark = ",", digits = 0)
```

```{r rm_stuff}
rm(dt, x, col, num_cols)
```

## Plots

```{r data_prep_plot}
fig_width <- 12
cols_sel <- c("Undetermined", "Mismatched", "Perfect")
d <- d_plots |>
  tidyr::unnest("plot_res") |>
  dplyr::select(-"label") |>
  dplyr::rename(
    Undetermined = "Undetermined Reads",
    Mismatched = "Mismatched Index Reads",
    Perfect = "Perfect Index Reads"
  ) |>
  tidyr::pivot_longer(cols = dplyr::all_of(cols_sel)) |>
  dplyr::mutate(
    sample = factor(sample),
    name = factor(name, levels = cols_sel)
  )
```

```{r plot_fun}
plot1 <- function(d) {
  plot2 <- function(d, bar_pos = "stack", ylab = "Counts") {
    assertthat::assert_that(bar_pos %in% c("fill", "stack"))
    lab_fun <- ifelse(
      bar_pos == "stack",
      scales::label_number(scale_cut = scales::cut_short_scale()),
      scales::percent_format(accuracy = 1)
    )
    d |>
      ggplot2::ggplot(ggplot2::aes(x = sample, y = value, fill = name)) +
      ggplot2::geom_bar(position = bar_pos, stat = "identity") +
      ggplot2::scale_fill_manual(
        "",
        values = c("Undetermined" = "#90ed7d", "Mismatched" = "#5c5c61", "Perfect" = "#7cb5ec")
      ) +
      ggplot2::coord_flip() +
      ggplot2::theme_minimal() +
      ggplot2::ylab(ylab) +
      ggplot2::xlab("") +
      ggplot2::scale_y_continuous(
        breaks = scales::pretty_breaks(n = 10),
        labels = lab_fun
      )
  }
  p1 <- plot2(d, bar_pos = "stack", ylab = "Counts")
  p2 <- plot2(d, bar_pos = "fill", ylab = "Percentages")
  list(p1 = p1, p2 = p2)
}

lane_plots <- d |>
  dplyr::filter(plot_nm == "bclconvert_lane_counts") |>
  plot1()
sample_plots <- d |>
  dplyr::filter(plot_nm == "bclconvert_sample_counts") |>
  plot1()
```

### Sample {.tabset .tabset-pills}

#### Counts

```{r fig.width=fig_width}
sample_plots$p1 |>
  plotly::ggplotly()
```

#### Percentages

```{r fig.width=fig_width}
sample_plots$p2 |>
  plotly::ggplotly()
```

### Lane {.tabset .tabset-pills}

#### Counts

```{r fig.width=fig_width}
lane_plots$p1 |>
  plotly::ggplotly()
```

#### Percentages

```{r fig.width=fig_width}
lane_plots$p2 |>
  plotly::ggplotly()
```
