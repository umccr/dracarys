---
format: gfm
knitr:
  opts_chunk:
    collapse: true
    comment: ''
    fig.path: "man/figures/README-"
---

<!-- README.md is generated from README.qmd. Please edit that file -->

```{r}
#| label: pkg_load
#| echo: false
#| message: false
use("dracarys")
```

# üî• dracarys - DRAGEN Workflow Tidying

![](https://emojis.slackmojis.com/emojis/images/1643515659/16823/flying_dragon.gif?1643515659 "Dragon Flying")


- Docs: <https://umccr.github.io/dracarys/>

[![Conda install](https://anaconda.org/umccr/r-dracarys/badges/version.svg)](https://anaconda.org/umccr/r-dracarys)
[![Conda install](https://anaconda.org/umccr/r-dracarys/badges/latest_release_date.svg)](https://anaconda.org/umccr/r-dracarys)

## üèÜ Aim

Given a directory with results from a DRAGEN workflow,
{dracarys} will grab files of interest and transform them into 'tidier'
structures for output into TSV/Parquet/RDS format for downstream ingestion
into a database/data lake.

## üçï Installation

## ‚ú® Supported Workflows


{dracarys} supports most outputs from the following DRAGEN workflows:

| Workflow   | Description |
|------------|-------------|
| bcl_convert | [BCLConvert][bclconvert-web] workflow |
| tso_ctdna_tumor_only | [ctDNA TSO500][cttso-web] workflow |
| wgs_alignment_qc | [DRAGEN DNA][dragen-web] (alignment) workflow |
| wts_tumor_only | [DRAGEN RNA][dragen-web] workflow |
| wgs_tumor_normal | [DRAGEN Tumor/Normal][dragen-web] workflow |

[dragen-web]: <https://support-docs.illumina.com/SW/DRAGEN_v40/Content/SW/DRAGEN/GPipelineIntro_fDG.htm>
[cttso-web]: <https://support-docs.illumina.com/SW/DRAGEN_TSO500_ctDNA_v2.1/Content/SW/TSO500/WorkflowDiagram_appT500ctDNAlocal.htm>
[bclconvert-web]: <https://emea.support.illumina.com/sequencing/sequencing_software/bcl-convert.html>

## üåÄ CLI

A `dracarys.R` command line interface is available for convenience.

- If you're using the conda package, the `dracarys.R` command will already be
  available inside the activated conda environment.
- If you're _not_ using the conda package, you need to export the
  `dracarys/inst/cli/` directory to your `PATH` in order to use `dracarys.R`.

```{bash eval=FALSE, echo=TRUE}
dracarys_cli=$(Rscript -e 'x = system.file("cli", package = "dracarys"); cat(x, "\n")' | xargs)
export PATH="${dracarys_cli}:${PATH}"
```

```{bash prompt=TRUE, echo=FALSE}
dracarys_cli=$(Rscript -e 'x = system.file("cli", package = "dracarys"); cat(x, "\n")' | xargs)
export PATH="${dracarys_cli}:${PATH}"

echo "dracarys.R --version" & dracarys.R --version
echo ""
echo "#-----------------------------------#"
echo "dracarys.R --help" & dracarys.R --help
echo ""
echo "#-----------------------------------#"
echo "#------- Tidy ----------------------#"
echo "dracarys.R tidy --help" & dracarys.R tidy --help
echo ""
```

<a name="running"></a>

## üöï Running

{dracarys} takes as input (`--in_dir`) a directory with results from one of the
DRAGEN workflows. It will recursively scan that directory
for supported files, and then it will
parse, transform and write the tidied versions into the specified output
directory (`--out_dir`). A prefix (`--prefix`) is prepended to each of the tidied
files. The output file format (`--format`) can be tsv, parquet, or both.
To get just a list of supported files within the specified input directory, use
the `-n (--dryrun)` option.

<details><summary>R</summary>

```{r eval=FALSE}
# help(umccr_tidy)
in_dir <- "gds://path/to/subjectX_multiqc_data/"
out_dir <- tempdir()
prefix <- "subjectX"
umccr_tidy(in_dir = in_dir, out_dir = out_dir, prefix = prefix)
```

</details>

<details><summary>Mac/Linux</summary>

From within an activated conda environment or a shell with the `dracarys.R`
CLI available:

```bash
dracarys.R tidy \
      -i gds://path/to/subjectX_multiqc_data/ \
      -o local_output_dir \
      -p subjectX_prefix
```

</details>

<details><summary>Docker</summary>

```bash
docker container run \
  -v $(PWD):/mount1 \
  --platform=linux/amd64 \
  --env "ICA_ACCESS_TOKEN" \
  --rm -it \
  ghcr.io/umccr/dracarys:X.X.X \
    dracarys.R tidy \
      -i gds://path/to/subjectX_multiqc_data/ \
      -o /mount1/output_dir \
      -p subjectX_prefix
```

</details>
